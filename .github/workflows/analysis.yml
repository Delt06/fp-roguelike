name: Analysis

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: .

jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file 🔑 (https://license.unity3d.com/manual)
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        # https://github.com/game-ci/unity-request-activation-file/releases/
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  analyze:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Compile for ${{ matrix.targetPlatform }} and analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          clean: true
      - uses: actions/cache@v2.1.3
        with:
          path: Library
          key: build-Library-${{ matrix.targetPlatform }}
          restore-keys: |
            build-Library-

      - uses: game-ci/unity-builder@v2
        id: compile
        name: Compile
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Plugins.Editor.BuildUtilities.EmitProjectFiles

      - name: Get solution file name
        id: solutionFileName
        run:
          echo "::set-output name=name::` ls $env.PROJECT_PATH | grep ".sln$" | head -1 `"

      - name: Run Resharper
        uses: glassechidna/resharper-action@master
        with:
          solution: ${{ steps.solutionFileName.outputs.name }}